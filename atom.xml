<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Geek的博客</title>
  
  <subtitle>快乐没有限量，梦境打不烂</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://github.com/GeekIce/"/>
  <updated>2019-08-30T08:05:52.281Z</updated>
  <id>https://github.com/GeekIce/</id>
  
  <author>
    <name>Geek</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>斐波那契数列</title>
    <link href="https://github.com/GeekIce/2019/08/14/%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E6%95%B0%E5%88%97/"/>
    <id>https://github.com/GeekIce/2019/08/14/斐波那契数列/</id>
    <published>2019-08-14T06:59:47.000Z</published>
    <updated>2019-08-30T08:05:52.281Z</updated>
    
    <content type="html"><![CDATA[<p>牛客网剑指斐波那契数列题目描述：<br>大家都知道斐波那契数列，现在要求输入一个整数n，请你输出斐波那契数列的第n项（从0开始，第0项为0）。（n&lt;=39）<br>解题：<br>在刚开始自己做这道题时，直接用暴力的递归算法解决，时间复杂度（O（2^N））。</p><a id="more"></a><pre><code class="bash">class Solution {public:    int Fibonacci(int n) {        <span class="keyword">if</span>(n&lt;1)            <span class="built_in">return</span> 0;        <span class="keyword">if</span>(n==1||n==2)            <span class="built_in">return</span> 1;        <span class="built_in">return</span> Fibonacci(n-1)+Fibonacci(n-2) ;    }};</code></pre><p>后来在左程云《程序员代码面试指南》看到本题的最优解法，时间复杂度为O(logN)。理解后，改写成下面C++代码，本题解题思路不详细说明，如果不理解，可以参考左程云《程序员代码面试指南》。</p><pre><code class="bash">class Solution {public:    vector&lt;vector&lt;int&gt; &gt; matrixPower(vector&lt;vector&lt;int&gt; &gt; m1,vector&lt;vector&lt;int&gt; &gt; m2){    vector&lt;vector&lt;int&gt; &gt; res(m1.size(),vector&lt;int&gt;(m2[0].size()));    <span class="keyword">for</span>(int i=0;i&lt;m2[0].size();i++)    {        <span class="keyword">for</span>(int j=0;j&lt;m1[0].size();j++)        {            <span class="keyword">for</span>(int k=0;k&lt;m2.size();k++)            {                res[i][j]+=m1[i][k]*m2[j][k];            }        }    }    <span class="built_in">return</span> res;}vector&lt;vector&lt;int&gt; &gt; matrix(vector&lt;vector&lt;int&gt; &gt; m,int p){    vector&lt;vector&lt;int&gt; &gt; res(m.size(),vector&lt;int&gt;(m[0].size()));    <span class="keyword">for</span>(int i=0;i&lt;res.size();i++)        res[i][i]=1;    vector&lt;vector&lt;int&gt; &gt; tmp=m;    <span class="keyword">for</span>(;p!=0;p=p&gt;&gt;1)    {        <span class="keyword">if</span>((p&amp;1)!=0)        {            res=matrixPower(res,tmp);        }        tmp=matrixPower(tmp,tmp);    }    <span class="built_in">return</span> res;}    int Fibonacci(int n) {        <span class="keyword">if</span>(n&lt;1)            <span class="built_in">return</span> 0;        <span class="keyword">if</span>(n==1||n==2)            <span class="built_in">return</span> 1;        vector&lt;vector&lt;int&gt; &gt; base(2,vector&lt;int&gt;(2));        //int base[2][2]={{1,1},{1,0}};        base[0][0]=1;        base[0][1]=1;        base[1][0]=1;        base[1][1]=0;        vector&lt;vector&lt;int&gt; &gt; res;        res=matrix(base,n-2);        <span class="built_in">return</span> res[0][0]+res[1][0];    }};</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;牛客网剑指斐波那契数列题目描述：&lt;br&gt;大家都知道斐波那契数列，现在要求输入一个整数n，请你输出斐波那契数列的第n项（从0开始，第0项为0）。（n&amp;lt;=39）&lt;br&gt;解题：&lt;br&gt;在刚开始自己做这道题时，直接用暴力的递归算法解决，时间复杂度（O（2^N））。&lt;/p&gt;
    
    </summary>
    
    
      <category term="计算机" scheme="https://github.com/GeekIce/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>struct求sizeof</title>
    <link href="https://github.com/GeekIce/2019/08/12/struct%E6%B1%82sizeof/"/>
    <id>https://github.com/GeekIce/2019/08/12/struct求sizeof/</id>
    <published>2019-08-12T06:58:23.000Z</published>
    <updated>2019-08-30T08:24:49.655Z</updated>
    
    <content type="html"><![CDATA[<h3 id="struct求sizeof三个准则"><a href="#struct求sizeof三个准则" class="headerlink" title="struct求sizeof三个准则"></a>struct求sizeof三个准则</h3><p>1.首地址的要求：结构体变量的首地址能够被其最宽基本类型成员的大小所整除<br>2.成员要求：结构体中的每个成员相对于结构体首地址的偏移量都是成员大小的整数倍<br>3.总大小要求：结构体总大小为结构体中最宽基本类型成员大小的整数倍。<br>举例说明：</p><a id="more"></a><p>例题一：在32位机器上有如下结构体，求sizeof(s)大小为多少？</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">struct s</span><br><span class="line">&#123;</span><br><span class="line">     long long a1;</span><br><span class="line">     char a2;</span><br><span class="line">     int a3;</span><br><span class="line">     char a4[2];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>sizeof(s)大小为24字节。<br>根据上述三条准则，a1的偏移量为0，sizeof(a1)=8；a2的偏移量为8，sizeof(a2)=1；a3的偏移量为9，<br>sizeof(a3)=4，不符合第二条准则，需在a2之后填充3个字节是a3的偏移量达到12；a4的偏移量为16，<br>sizeof(a4)=2；现在结构体的总长度为8+1+3+4+2=18，而结构体成员最大长度为8，不符合第三条准<br>则，需要在a4后填充6个字节。所以，sizeof(s)大小为24字节。</p><p>例题2：有如下代码，求语句printf(“%d\n”, sizeof(too) + sizeof(max))执行结果是什么？</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#include&lt;stdio.h&gt;</span></span><br><span class="line">typedef union</span><br><span class="line">&#123;</span><br><span class="line">long i;</span><br><span class="line">int k[5];</span><br><span class="line">char c;</span><br><span class="line">&#125;DATE;</span><br><span class="line">struct data</span><br><span class="line">&#123;</span><br><span class="line">int cat;</span><br><span class="line">DATE cow;</span><br><span class="line">double dog;</span><br><span class="line">&#125;too;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">DATE max;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, sizeof(too) + sizeof(max));</span><br><span class="line"><span class="built_in">return</span> 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><pre><code>由于自己在做这道题时，也不确定答案是52还是64，后来经过测试后，得到正确答案为52。下面我来说一下原因：在union结构中，所有变量共用同一个控件，uonion求sizeof通常取其成员变量的最大值。本题中，长度最大的变量为int k[5]，int k[5]占4*5=20个字节，所以sizeof(max)为20字节。在结构体too中，cat占4字节，cow占20字节，dog占8字节，一共32字节。所以sizeof(too)+sizeof(max) 等于20+32 等于52 。</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;struct求sizeof三个准则&quot;&gt;&lt;a href=&quot;#struct求sizeof三个准则&quot; class=&quot;headerlink&quot; title=&quot;struct求sizeof三个准则&quot;&gt;&lt;/a&gt;struct求sizeof三个准则&lt;/h3&gt;&lt;p&gt;1.首地址的要求：结构体变量的首地址能够被其最宽基本类型成员的大小所整除&lt;br&gt;2.成员要求：结构体中的每个成员相对于结构体首地址的偏移量都是成员大小的整数倍&lt;br&gt;3.总大小要求：结构体总大小为结构体中最宽基本类型成员大小的整数倍。&lt;br&gt;举例说明：&lt;/p&gt;
    
    </summary>
    
    
      <category term="计算机" scheme="https://github.com/GeekIce/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
      <category term="C语言" scheme="https://github.com/GeekIce/tags/C%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>不使用额外变量交换两个整数的值</title>
    <link href="https://github.com/GeekIce/2019/08/10/hello-world/"/>
    <id>https://github.com/GeekIce/2019/08/10/hello-world/</id>
    <published>2019-08-10T04:12:57.000Z</published>
    <updated>2019-08-30T07:06:46.518Z</updated>
    
    <content type="html"><![CDATA[<h3 id="异或法"><a href="#异或法" class="headerlink" title="异或法"></a>异或法</h3><p>如果给定整数a和b，用以下三行代码即可交换a和b的值</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a=a^b;</span><br><span class="line">b=a^b;//b=(a^b)^b=a^(b^b)=a^0=a</span><br><span class="line">a=a^b;//a=(a^b)^a=b^(a^a)=b^0=b</span><br></pre></td></tr></table></figure><p>按位异或运算, 对二进制数按位异或操作。 操作的结果是如果某位不同则该位为1, 否则该位为0。<br>该方法缺点：只能针对变量类型为int和char的情况</p><a id="more"></a><h3 id="求和法"><a href="#求和法" class="headerlink" title="求和法"></a>求和法</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a=a+b;</span><br><span class="line">b=a-b;//b=(a+b)-b=a</span><br><span class="line">a=a-b;//a=(a+b)-a=b</span><br></pre></td></tr></table></figure><p>该方法缺点：可能溢出</p><h3 id="求差法"><a href="#求差法" class="headerlink" title="求差法"></a>求差法</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a=b<span class="_">-a</span>;</span><br><span class="line">b=b<span class="_">-a</span>;//b=b-(b<span class="_">-a</span>)=a</span><br><span class="line">a=a+b;//a=(b<span class="_">-a</span>)+a=b</span><br></pre></td></tr></table></figure><p>该方法缺点：可能溢出</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;异或法&quot;&gt;&lt;a href=&quot;#异或法&quot; class=&quot;headerlink&quot; title=&quot;异或法&quot;&gt;&lt;/a&gt;异或法&lt;/h3&gt;&lt;p&gt;如果给定整数a和b，用以下三行代码即可交换a和b的值&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;a=a^b;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;b=a^b;//b=(a^b)^b=a^(b^b)=a^0=a&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;a=a^b;//a=(a^b)^a=b^(a^a)=b^0=b&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;按位异或运算, 对二进制数按位异或操作。 操作的结果是如果某位不同则该位为1, 否则该位为0。&lt;br&gt;该方法缺点：只能针对变量类型为int和char的情况&lt;/p&gt;
    
    </summary>
    
    
      <category term="计算机" scheme="https://github.com/GeekIce/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
      <category term="C语言" scheme="https://github.com/GeekIce/tags/C%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>进程与线程</title>
    <link href="https://github.com/GeekIce/2019/08/07/%E8%BF%9B%E7%A8%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B/"/>
    <id>https://github.com/GeekIce/2019/08/07/进程与线程/</id>
    <published>2019-08-07T02:10:18.000Z</published>
    <updated>2019-08-30T06:42:27.173Z</updated>
    
    <content type="html"><![CDATA[<h3 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h3><p>进程是程序的一次执行。传统操作系统中，进程是进程实体的运行过程，是操作系统进行资源分配和调度的一个独立单位。实现了操作系统的并发.<br>进程是由程序段，数据段和进程控制块三部分组成。<br>进程的三种基本状态：<br>    就绪状态（Ready）：没有获得CPU<br>    执行状态（Running）：已获得CPU<br>    阻塞状态（Block）：I/O请求，申请缓冲区失败</p><a id="more"></a><h3 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h3><p>线程是进程的子任务，是CPU调度和分派的基本单位，用于保证程序的实时性，实现进程内部的并发,线程是操作系统可识别的最小执行和调度单位。</p><p>区别：<br>1.一个线程只能属于一个进程，而一个进程可以有多个线程，但至少有一个线程。<br>2.拥有资源：进程可以拥有资源，并作为系统中拥有资源的一个基本单位；线程本身并不拥有系统资源，而是仅有一点必不可少的，能够保证独立运行的资源。<br>3.进程是资源分配的基本单位，线程是CPU调度和分派的基本单位；<br>4.系统开销： 由于在创建或撤消进程时，系统都要为之分配或回收资源进程控制块，分配和回收其他资源，如内存空间、I／O设备等。因此，操作系统所付出的开销将显著地大于在创建或撤消线程时的开销。类似地，在进行进程切换时，涉及到整个当前进程CPU环境的保存以及新被调度运行的进程的CPU环境的设置。而线程切换只须保存和设置少量寄存器的内容，并不涉及存储器管理方面的操作。可见，进程切换的开销也远大于线程切换的开销。<br>5.独立性：在同一进程中的不同线程之间的独立性要比不同进程之间的独立性低得多。<br>6.通信：由于同一进程中的多个线程具有相同的地址空间，致使它们之间的同步和通信的实现，也变得比较容易。进程间通信IPC，线程间可以直接读写进程数据段（如全局变量）来进行通信——需要进程同步和互斥手段的辅助，以保证数据的一致性。在有的系统中，线程的切换、同步和通信都无须操作系统内核的干预<br>7.进程编程调试简单可靠性高，但是创建销毁开销大；线程正相反，开销小，切换速度快，但是编程调试相对复杂。<br>8.进程间不会相互影响 ；线程一个线程挂掉将导致整个进程挂掉<br>9.进程适应于多核、多机分布；线程适用于多核</p><p>扩展：进程与程序的区别<br>1.进程具有PCB结构，程序没有。<br>2.进程是程序的一次运行活动，动态的。<br>   程序是一组有序的静态指令，静态的。<br>3.一个进程可以执行一个或多个程序，多个进程可以执行同一个区别。<br>4.进程肯定有一个程序与之对应。<br>   程序可能没有进程和它对应。<br>5.程序可以长期保存，是永久的。<br>   进程是一次执行过程，有一个生命周期，是暂时的，动态的。<br>6.进程能更真实的描述并发过程，程序不能。<br>7.进程具有创建其他进程的功能，程序不能。<br>8.进程具有并发性和交往性，程序是封闭的。<br>9.进程是由程序和数据组成。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;进程&quot;&gt;&lt;a href=&quot;#进程&quot; class=&quot;headerlink&quot; title=&quot;进程&quot;&gt;&lt;/a&gt;进程&lt;/h3&gt;&lt;p&gt;进程是程序的一次执行。传统操作系统中，进程是进程实体的运行过程，是操作系统进行资源分配和调度的一个独立单位。实现了操作系统的并发.&lt;br&gt;进程是由程序段，数据段和进程控制块三部分组成。&lt;br&gt;进程的三种基本状态：&lt;br&gt;    就绪状态（Ready）：没有获得CPU&lt;br&gt;    执行状态（Running）：已获得CPU&lt;br&gt;    阻塞状态（Block）：I/O请求，申请缓冲区失败&lt;/p&gt;
    
    </summary>
    
    
      <category term="计算机" scheme="https://github.com/GeekIce/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
      <category term="操作系统" scheme="https://github.com/GeekIce/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>操作系统实验————虚拟存储器管理</title>
    <link href="https://github.com/GeekIce/2019/08/05/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%AE%9E%E9%AA%8C%E2%80%94%E2%80%94%E2%80%94%E2%80%94%E8%99%9A%E6%8B%9F%E5%AD%98%E5%82%A8%E5%99%A8%E7%AE%A1%E7%90%86/"/>
    <id>https://github.com/GeekIce/2019/08/05/操作系统实验————虚拟存储器管理/</id>
    <published>2019-08-05T02:09:53.000Z</published>
    <updated>2019-08-30T06:48:04.653Z</updated>
    
    <content type="html"><![CDATA[<p>###算法介绍<br>1.先进先出置换算法(FIFO) ：该算法总是淘汰最先进入内存的页面。实现简单，性能差。<br>2.最近最久未使用算法(LRU) ：该算法根据页面调入内存后的使用情况做出决策的，选择最近最久为使用的页面淘汰。<br>3.最佳置换算法(OPT) ：该算法总是替换最晚使用的页。具有最好的性能，难于实现，页错误率（缺页）最低，不会出现Belady异常。<br>解题思路：<br>页面的存储结构Page，成员num记录页面号，成员time记录调入内存时间。数组a记录页面号引用串<br>1.先进先出置换算法(FIFO) ：对于每个页面，变量front是标记最先进入内存的页面在内存的位置，用函数<br>Equation判断请求页面是否已在内存中，若不在内存中则将该页面调入内存，front指向最先进入内存的页面。<br>2.最近最久未使用算法(LRU) ：对于每个页面，用函数Equation判断请求页面是否已在内存中，若在内存中<br>则将该页面调入内存时间置0，将内存中其他页面调入内存时间均加1；若不在内存中，用函数GetMax找出<br>调入内存时间最长的页面，将调入内存的页面放到该页面在内存中的位置，将调入内存的页面的调入时间置<br>0，内存中其他页面调入内存时间均加1。<br>3.最佳置换算法(OPT) ：对于每个页面，用函数Equation判断请求页面是否已在内存中，若不在内存中，如<br>果内存中有空闲位置，直接将该页面调入内存；如果内存中没有空闲位置，则在数组a钟用函数find找到内存<br>中所有页面下一次调入内存时的下标，将下标最大的页面替换成新调入的页面。</p><p>###代码如下：</p><a id="more"></a><pre><code class="bash"><span class="comment">#include&lt;stdio.h&gt;</span><span class="comment">#include&lt;stdlib.h&gt;</span><span class="comment">#include&lt;iostream&gt;</span><span class="comment">#include&lt;conio.h&gt;</span><span class="comment">#define M 3    //内存页数</span><span class="comment">#define N 20  //页面引用序列数</span><span class="comment">#define Myprintf printf("---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---\n")    </span>/*表格控制*///定义页面的存储结构typedef struct page{    int num;  //记录页面号    int time; //记录调入内存时间}Page;Page P[M];           //内存单元数int c[M][N];         //暂保存内存当前的状态int front = 0;            //初始化内存单元、缓冲区void Init(Page *p, int c[M][N]){    int i, j;    <span class="keyword">for</span> (i = 0;i&lt;M;i++)    {        p[i].num = -1;        p[i].time = N - i - 1;    }    <span class="keyword">for</span> (i = 0;i&lt;M;i++)        <span class="keyword">for</span> (j = 0;j&lt;N;j++)            c[i][j] = -1;}//判断页面是否已在内存中int Equation(int fold, Page *p){    int i;    <span class="keyword">for</span> (i = 0;i&lt;M;i++)    {        <span class="keyword">if</span> (fold == p[i].num)            <span class="built_in">return</span> i;    }    <span class="built_in">return</span> -1;}//先进先出页面置换算法,加载的页面已在内存中,则//返回0。否则置换出最先调入内存的页，并返回1int FIFO(int fold, Page *p){    int i,flag=1;    int val = Equation(fold, p);    <span class="keyword">if</span> (val&lt;0)  //请求页面不在内存    {        <span class="keyword">for</span> (i = 0;i&lt;M;i++)        {            <span class="keyword">if</span> (p[i].num == -1)            {                p[i].num = fold;                flag = 0;                <span class="built_in">break</span>;            }        }        <span class="keyword">if</span>(flag==1)        {            p[front].num=fold;        }        front=(front+1)%M;        <span class="built_in">return</span> 1;    }    <span class="built_in">return</span> 0;}//LRU置换算法//取得在内存中停留最久的页面,默认状态下为最早调入的页面int GetMax(Page *p){    int i;    int max = -1;    int tag = 0;    <span class="keyword">for</span> (i = 0;i&lt;M;i++)    {        <span class="keyword">if</span> (p[i].time&gt;max)        {            max = p[i].time;            tag = i;        }    }    <span class="built_in">return</span> tag;}int LRU(int fold, Page *p){    int i;    int a;    a = Equation(fold, p);    <span class="keyword">if</span> (a &gt;= 0)    {        p[a].time = 0;        <span class="keyword">for</span> (i = 0;i &lt; M;i++)        {            <span class="keyword">if</span> (i != a)                p[i].time++;        }        <span class="built_in">return</span> 0;    }    <span class="keyword">else</span>    {        a = GetMax(p);        p[a].num = fold;        p[a].time = 0;        <span class="keyword">for</span> (i = 0;i &lt; M;i++)        {            <span class="keyword">if</span> (i != a)                p[i].time++;        }        <span class="built_in">return</span> 1;    }}int find(int mark, int arr[], int tag){    int i;    <span class="keyword">for</span> (i = mark + 1;i&lt;N;i++)    {        <span class="keyword">if</span> (arr[i] == tag)        {            <span class="built_in">return</span> i;        }    }    <span class="built_in">return</span> N;}int OPT(int fold, Page *p, int temp, int arr[]){    int i, flag, max = 0, per, cur;    int tag = Equation(fold, p);    flag = 1;    <span class="keyword">if</span> (tag&lt;0)  //请求页面不在内存    {        <span class="keyword">for</span> (i = 0;i&lt;M;i++)        {            <span class="keyword">if</span> (p[i].num == -1)            {                p[i].num = fold;                flag = 0;                <span class="built_in">break</span>;            }        }        <span class="keyword">if</span> (flag == 1)        {            <span class="keyword">for</span> (int k = 0; k &lt; M; k++)            {                per = find(temp, arr, p[k].num);                <span class="keyword">if</span> (max &lt; per)                {                    max = per;                    cur = k;                }            }            p[cur].num = fold;        }        <span class="built_in">return</span> 1;    }    <span class="built_in">return</span> 0;}//显示换页过程void Printf(int a[], int q[], int k){    int i, j;    <span class="built_in">printf</span>(<span class="string">"显示换页过程:\n"</span>);    Myprintf;    <span class="keyword">for</span> (j = 0;j&lt;N;j++)        <span class="built_in">printf</span>(<span class="string">"%2d |"</span>, a[j]);    <span class="built_in">printf</span>(<span class="string">"\n"</span>);    Myprintf;    <span class="keyword">for</span> (i = 0;i&lt;M;i++)    {        <span class="keyword">for</span> (j = 0;j&lt;N;j++)        {            <span class="keyword">if</span> (c[i][j] == -1)                <span class="built_in">printf</span>(<span class="string">"%2c |"</span>, 32);            <span class="keyword">else</span>                <span class="built_in">printf</span>(<span class="string">"%2d |"</span>, c[i][j]);        }        <span class="built_in">printf</span>(<span class="string">"\n"</span>);    }    Myprintf;    <span class="built_in">printf</span>(<span class="string">"\n调入队列为:"</span>);    <span class="keyword">for</span> (i = 0;i&lt;k + 1;i++)        <span class="built_in">printf</span>(<span class="string">"%3d"</span>, q[i]);    <span class="built_in">printf</span>(<span class="string">"\n缺页次数为：%6d\n缺页率：%16.6f\n"</span>, k+1, (<span class="built_in">float</span>)(k + 1) / N);    <span class="built_in">printf</span>(<span class="string">"\n"</span>);}int Menu(){    int i;    <span class="built_in">printf</span>(<span class="string">"\t\t*******************页面置换算法******************* \n"</span>);    <span class="built_in">printf</span>(<span class="string">"\t        1.先进先出置换算法(FIFO)  \n"</span>);    <span class="built_in">printf</span>(<span class="string">"\t        2.最近最久未使用算法(LRU) \n"</span>);    <span class="built_in">printf</span>(<span class="string">"\t        3.最佳置换算法(OPT) \n"</span>);    <span class="built_in">printf</span>(<span class="string">"\t        4.退出 \n"</span>);    <span class="built_in">printf</span>(<span class="string">"\t\t******************请输入您的选择******************\n"</span>);    std::cin &gt;&gt; i;    <span class="built_in">return</span> i;}//主函数void main(){    int i, j, flag;    int q[100]; //记录调入队列    int k;   //调入队列计数变量    int a[N] = { 7,0,1,2,0 , 3, 0, 4, 2, 3, 0, 3, 2, 1, 2, 0, 1, 7, 0, 1};    <span class="keyword">while</span> (1)    {        flag = Menu();        switch (flag)        {        <span class="keyword">case</span> 1:  //先进先出置换算法(FIFO)        {            Init(P, c);            k = -1;            <span class="keyword">for</span> (i = 0;i&lt;N;i++)            {                <span class="keyword">if</span> (FIFO(a[i], P))                    q[++k] = a[i];   //记录调入页面                //c[0][i] = a[i];                <span class="keyword">for</span> (j = 0;j&lt;M;j++)                    c[j][i] = P[j].num;            }            Printf(a, q, k);        }        <span class="built_in">break</span>;        <span class="keyword">case</span> 2:  //最近最久未使用算法(LRU)        {            Init(P, c);            k = -1;            <span class="keyword">for</span> (i = 0;i&lt;N;i++)            {                <span class="keyword">if</span> (LRU(a[i], P))                    q[++k] = a[i];   //记录调入页面                <span class="keyword">for</span> (j = 0;j&lt;M;j++)                    c[j][i] = P[j].num;            }            Printf(a, q, k);        }        <span class="built_in">break</span>;        <span class="keyword">case</span> 3:  //最佳置换算法（OPT）        {            Init(P, c);            k = -1;            <span class="keyword">for</span> (i = 0;i&lt;N;i++)            {                <span class="keyword">if</span> (OPT(a[i], P, i, a))                    q[++k] = a[i];   //记录调入页面                <span class="keyword">for</span> (j = 0;j&lt;M;j++)                    c[j][i] = P[j].num;            }            Printf(a, q, k);        }        <span class="built_in">break</span>;        <span class="keyword">case</span> 4:        {            <span class="built_in">printf</span>(<span class="string">"欢迎使用！\n"</span>);            <span class="built_in">exit</span>(1);        }        <span class="built_in">break</span>;        }    }}</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;###算法介绍&lt;br&gt;1.先进先出置换算法(FIFO) ：该算法总是淘汰最先进入内存的页面。实现简单，性能差。&lt;br&gt;2.最近最久未使用算法(LRU) ：该算法根据页面调入内存后的使用情况做出决策的，选择最近最久为使用的页面淘汰。&lt;br&gt;3.最佳置换算法(OPT) ：该算法总是替换最晚使用的页。具有最好的性能，难于实现，页错误率（缺页）最低，不会出现Belady异常。&lt;br&gt;解题思路：&lt;br&gt;页面的存储结构Page，成员num记录页面号，成员time记录调入内存时间。数组a记录页面号引用串&lt;br&gt;1.先进先出置换算法(FIFO) ：对于每个页面，变量front是标记最先进入内存的页面在内存的位置，用函数&lt;br&gt;Equation判断请求页面是否已在内存中，若不在内存中则将该页面调入内存，front指向最先进入内存的页面。&lt;br&gt;2.最近最久未使用算法(LRU) ：对于每个页面，用函数Equation判断请求页面是否已在内存中，若在内存中&lt;br&gt;则将该页面调入内存时间置0，将内存中其他页面调入内存时间均加1；若不在内存中，用函数GetMax找出&lt;br&gt;调入内存时间最长的页面，将调入内存的页面放到该页面在内存中的位置，将调入内存的页面的调入时间置&lt;br&gt;0，内存中其他页面调入内存时间均加1。&lt;br&gt;3.最佳置换算法(OPT) ：对于每个页面，用函数Equation判断请求页面是否已在内存中，若不在内存中，如&lt;br&gt;果内存中有空闲位置，直接将该页面调入内存；如果内存中没有空闲位置，则在数组a钟用函数find找到内存&lt;br&gt;中所有页面下一次调入内存时的下标，将下标最大的页面替换成新调入的页面。&lt;/p&gt;
&lt;p&gt;###代码如下：&lt;/p&gt;
    
    </summary>
    
    
      <category term="计算机" scheme="https://github.com/GeekIce/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
      <category term="操作系统" scheme="https://github.com/GeekIce/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>多个生产者消费者程序</title>
    <link href="https://github.com/GeekIce/2019/08/04/%E5%A4%9A%E4%B8%AA%E7%94%9F%E4%BA%A7%E8%80%85%E6%B6%88%E8%B4%B9%E8%80%85%E7%A8%8B%E5%BA%8F/"/>
    <id>https://github.com/GeekIce/2019/08/04/多个生产者消费者程序/</id>
    <published>2019-08-04T04:29:35.000Z</published>
    <updated>2019-08-30T07:02:21.149Z</updated>
    
    <content type="html"><![CDATA[<p>题目：模拟三个生产者，两个消费者，共享两个缓冲区的情形。<br>代码如下：</p><a id="more"></a><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#include &lt;stdio.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;stdlib.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;conio.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;windows.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;string.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;time.h&gt;</span></span><br><span class="line">struct spcb</span><br><span class="line">&#123;</span><br><span class="line"> char name[20];//进程名 </span><br><span class="line"> char state;//状态（B表示阻塞，W表示就绪） </span><br><span class="line"> char why;//等待原因（等待信号量s1和s2） </span><br><span class="line"> int  dd;//断点 </span><br><span class="line"> int note; </span><br><span class="line">&#125;;</span><br><span class="line">struct spcb cp[5],block[15];</span><br><span class="line">int tag[5],biao[20];</span><br><span class="line">int full1,full2,empty1,empty2,i,j,pc,m;//pc指令计数器，s1空缓冲区的数量，s2满缓冲区的数量 </span><br><span class="line">int xx,yy;</span><br><span class="line">int in1=0,in2=0;</span><br><span class="line">int out1=0,out2=0;</span><br><span class="line">int tim=12,min=10;</span><br><span class="line">int count=0,num=0,count1=3,count2=2;</span><br><span class="line">char array1[10][20];</span><br><span class="line">char array2[10][20];</span><br><span class="line">int bb;</span><br><span class="line">char arr[10][20]=&#123;<span class="string">"玉米卷"</span>,<span class="string">"椰子面包"</span>,<span class="string">"奶油包"</span>,<span class="string">"起士卷"</span>,<span class="string">"大红豆面包"</span>,</span><br><span class="line"><span class="string">"杏仁奶酥"</span>,<span class="string">"奶油蛋糕"</span>,<span class="string">"豆乳面包"</span>,<span class="string">"泡芙"</span>,<span class="string">"牛角酥"</span>&#125;;</span><br><span class="line">char x[5][10];</span><br><span class="line">int pa[3][4],sa[2][4];//每个pa[i]存放生产者程序中的一条指令的入口地址，每个sa[i]存放生消费者程序中的一条指令的入口地址</span><br><span class="line">int seed(time(NULL));</span><br><span class="line">int p(int s) /* p操作原语<span class="built_in">wait</span>*/</span><br><span class="line">&#123;</span><br><span class="line">    s=s-1;</span><br><span class="line">    <span class="keyword">if</span>(s&lt;0)</span><br><span class="line">    &#123;</span><br><span class="line">        cp[bb].state=<span class="string">'B'</span>; /* B表示阻塞*/</span><br><span class="line">        cp[bb].why=<span class="string">'s'</span>;</span><br><span class="line">        tag[bb]=1;</span><br><span class="line">        block[count]=cp[bb];</span><br><span class="line">        biao[count]=bb;</span><br><span class="line">        count++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        cp[bb].state=<span class="string">'W'</span>; /* W表示就绪*/</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">return</span>(s);</span><br><span class="line">&#125;</span><br><span class="line">int v(int s) /*v操作原语signal*/</span><br><span class="line">&#123;</span><br><span class="line">    s=s+1;</span><br><span class="line">    <span class="keyword">if</span>(s&lt;=0)</span><br><span class="line">    &#123;</span><br><span class="line">    cp[biao[num]].state=<span class="string">'W'</span>;</span><br><span class="line">    cp[biao[num]].why=<span class="string">' '</span>;</span><br><span class="line">        block[num].state=<span class="string">'W'</span>;</span><br><span class="line">        block[num].why=<span class="string">' '</span>;</span><br><span class="line">        tag[biao[num]]=0;</span><br><span class="line">        num++;</span><br><span class="line">    &#125;</span><br><span class="line">cp[bb].state=<span class="string">'W'</span>;</span><br><span class="line">    <span class="built_in">return</span>(s);</span><br><span class="line">&#125;</span><br><span class="line">void disp() /*进程显示函数,用于显示进程信息*/ </span><br><span class="line">&#123; </span><br><span class="line"><span class="keyword">for</span>(xx=0;xx&lt;5;xx++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n   name    state    why    dd  \n"</span>); </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">" %s  "</span>,cp[xx].name); </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"   %c   "</span>,cp[xx].state); </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"   %c   "</span>,cp[xx].why); </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"   %d  "</span>,cp[xx].dd);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">void put()</span><br><span class="line">&#123;</span><br><span class="line">int pro_time=rand()%4+1;//随机产生1~4分制作面包时间 </span><br><span class="line">int ab=pro_time;</span><br><span class="line">int aa=abs(rand()%10);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"****************Geek面包店****************\n\n"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"--------------现在时间为%d:%d-------------\n\n"</span>,tim,min);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n%s正在制作面包，需要%d分，请稍等\n"</span>,cp[bb].name,pro_time);</span><br><span class="line">disp();</span><br><span class="line">    Sleep(5000);</span><br><span class="line">system(<span class="string">"cls"</span>);</span><br><span class="line">    <span class="keyword">for</span>(int tt=0;tt&lt;ab;tt++)</span><br><span class="line">    &#123;</span><br><span class="line">    pro_time--;</span><br><span class="line">    min++;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"****************Geek面包店****************\n\n"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"--------------现在时间为%d:%d-------------\n\n"</span>,tim,min);</span><br><span class="line"><span class="keyword">if</span>(pro_time!=0)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n%s正在制作面包，需要%d分，请稍等\n"</span>,cp[bb].name,pro_time);</span><br><span class="line">disp();</span><br><span class="line">Sleep(5000);</span><br><span class="line">system(<span class="string">"cls"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(cp[bb].note==1)</span><br><span class="line">&#123;</span><br><span class="line">strcpy(array1[in1],arr[aa]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n缓冲区1中新出炉了%s!\n"</span>,array1[in1]);</span><br><span class="line">in1=(in1+1)%10;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">strcpy(array2[in2],arr[aa]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n缓冲区2中新出炉了%s!\n"</span>,array2[in2]);</span><br><span class="line">in2=(in2+1)%10;</span><br><span class="line">&#125;   </span><br><span class="line">    int k = 0;</span><br><span class="line">    //统计输出现有产品 </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"--------------橱柜1--------------\n"</span>);</span><br><span class="line">    <span class="keyword">for</span>(m=0;m&lt;10;m++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (strcmp(array1[m],<span class="string">""</span>)!=0) </span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%s\t"</span>,array1[m]);</span><br><span class="line">            k = k+1;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"--------------橱柜2--------------\n"</span>);</span><br><span class="line">    <span class="keyword">for</span>(m=0;m&lt;10;m++)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">if</span> (strcmp(array2[m],<span class="string">""</span>)!=0) </span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%s\t"</span>,array2[m]);</span><br><span class="line">            k = k+1;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n********************************\n"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"当前橱柜中共有%d个面包\n"</span>,k);</span><br><span class="line">    Sleep(5000);</span><br><span class="line">system(<span class="string">"cls"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">void get()</span><br><span class="line">&#123;</span><br><span class="line">int sell_time=rand()%3+1;//随机产生1~4分卖出卖出时间  </span><br><span class="line">int ac=sell_time;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"****************Geek面包店****************\n\n"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"--------------现在时间为%d:%d-------------\n\n"</span>,tim,min);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n%s正在购买面包，预计需要%d分\n"</span>,cp[bb].name,sell_time);</span><br><span class="line">disp();</span><br><span class="line">    Sleep(5000);</span><br><span class="line">system(<span class="string">"cls"</span>);</span><br><span class="line">    <span class="keyword">for</span>(int qq=0;qq&lt;ac;qq++)</span><br><span class="line">    &#123;</span><br><span class="line">    sell_time--;</span><br><span class="line">    min++;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"****************李冰面包店****************\n\n"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"--------------现在时间为%d:%d-------------\n\n"</span>,tim,min);</span><br><span class="line"><span class="keyword">if</span>(sell_time!=0)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n%s正在购买面包，预计需要%d分\n"</span>,cp[bb].name,sell_time);</span><br><span class="line">disp();</span><br><span class="line">Sleep(5000);</span><br><span class="line">system(<span class="string">"cls"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(cp[bb].note==1)</span><br><span class="line">&#123;</span><br><span class="line">strcpy(x[out1],array1[out1]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n缓冲区1中的%s销售出去了\n"</span>,x);</span><br><span class="line">    strcpy(array1[out1],<span class="string">""</span>);</span><br><span class="line">    out1=(out1+1)%10;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">strcpy(x[out2],array2[out2]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n缓冲区2中的%s销售出去了\n"</span>,x);</span><br><span class="line">    strcpy(array2[out2],<span class="string">""</span>);</span><br><span class="line">    out2=(out2+1)%10;</span><br><span class="line">&#125;</span><br><span class="line">    //统计输出现有产品 </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"--------------橱柜1--------------\n"</span>);</span><br><span class="line">    int k = 0;</span><br><span class="line">    <span class="keyword">for</span>(m=0;m&lt;10;m++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (strcmp(array1[m],<span class="string">""</span>)!=0)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%s\t"</span>,array1[m]);</span><br><span class="line">            k = k+1;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"--------------橱柜2--------------\n"</span>);</span><br><span class="line"><span class="keyword">for</span>(m=0;m&lt;10;m++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (strcmp(array2[m],<span class="string">""</span>)!=0)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%s\t"</span>,array2[m]);</span><br><span class="line">            k = k+1;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n********************************\n"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"当前橱柜中共有%d个面包\n"</span>,k);</span><br><span class="line">    Sleep(5000);</span><br><span class="line">system(<span class="string">"cls"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">void gotol()</span><br><span class="line">&#123;</span><br><span class="line">    pc=0;</span><br><span class="line">&#125; </span><br><span class="line">void init()/*初始化程序*/</span><br><span class="line">&#123;</span><br><span class="line">    full1=10;/*s1表示空缓冲区的数量*/</span><br><span class="line">    full2=10;</span><br><span class="line">    empty1=0; /*s2表示满缓冲区的数量*/</span><br><span class="line">    empty2=0;</span><br><span class="line">    strcpy(cp[0].name,<span class="string">"生产者1"</span>);</span><br><span class="line">    strcpy(cp[1].name,<span class="string">"生产者2"</span>);</span><br><span class="line">    strcpy(cp[2].name,<span class="string">"生产者3"</span>);</span><br><span class="line">    strcpy(cp[3].name,<span class="string">"消费者1"</span>);</span><br><span class="line">    strcpy(cp[4].name,<span class="string">"消费者2"</span>);</span><br><span class="line">    <span class="keyword">for</span>(xx=0;xx&lt;5;xx++)</span><br><span class="line">&#123;</span><br><span class="line">cp[xx].state=<span class="string">'W'</span>;</span><br><span class="line">cp[xx].dd=0;</span><br><span class="line">cp[xx].why=<span class="string">' '</span>;</span><br><span class="line">tag[xx]=0;</span><br><span class="line">cp[xx].note=0;</span><br><span class="line">&#125; </span><br><span class="line">    //缓冲区=0 </span><br><span class="line">    <span class="keyword">for</span>(m=0;m&lt;10;m++)</span><br><span class="line">    &#123;</span><br><span class="line">        strcpy(array1[m],<span class="string">""</span>);</span><br><span class="line">        strcpy(array2[m],<span class="string">""</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">void bornpa() /*将生产者程序装入pa[][]中*/</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span>(xx=0;xx&lt;3;xx++) </span><br><span class="line">    &#123;</span><br><span class="line">    int r=0;</span><br><span class="line">    <span class="keyword">for</span>(yy=0;yy&lt;4;yy++)</span><br><span class="line">    &#123;</span><br><span class="line">    pa[xx][yy]=r;</span><br><span class="line">    r++;</span><br><span class="line">&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">void bornsa()/*将消费者程序装入sa[][]中*/</span><br><span class="line">&#123;</span><br><span class="line">int f;</span><br><span class="line">    <span class="keyword">for</span>(xx=3;xx&lt;5;xx++)</span><br><span class="line">    &#123;</span><br><span class="line">    f=0;</span><br><span class="line">        <span class="keyword">for</span>(yy=0;yy&lt;4;yy++)</span><br><span class="line">    &#123;</span><br><span class="line">    sa[xx][yy]=f;</span><br><span class="line">    f++;</span><br><span class="line">&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">void diaodu()/*处理器调度程序*/</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span>(count1!=0||count2!=0)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(min==30)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n****************Geek面包店****************\n\n"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"--------------现在时间为%d:%d-------------\n\n"</span>,tim,min);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"****************面包店关门****************\n\n"</span>);</span><br><span class="line"><span class="built_in">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">bb=rand()%5;</span><br><span class="line">        pc=cp[bb].dd;</span><br><span class="line">i=pc;/*此时把PC的值付给I*/</span><br><span class="line">        <span class="keyword">if</span>(tag[bb]==0&amp;&amp;bb&lt;3)</span><br><span class="line">        &#123;</span><br><span class="line">        <span class="keyword">if</span>(pc!=1)</span><br><span class="line">        &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"****************Geek面包店****************\n\n"</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"--------------现在时间为%d:%d-------------\n\n"</span>,tim,min);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"------------面包店进行生产工作------------\n\n"</span>); </span><br><span class="line">&#125;</span><br><span class="line">            j=pa[bb][i];</span><br><span class="line">            pc=i+1;</span><br><span class="line">            switch(j)</span><br><span class="line">            &#123;   </span><br><span class="line">            <span class="keyword">case</span> 0: </span><br><span class="line">                int huan;</span><br><span class="line">                huan=rand()%2;</span><br><span class="line">                <span class="keyword">if</span>(huan==0)</span><br><span class="line">                &#123;</span><br><span class="line">                full1=p(full1);</span><br><span class="line">                cp[bb].note=1;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"---------%s向缓冲区1申请资源---------\n\n"</span>,cp[bb].name); </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                full2=p(full2);</span><br><span class="line">                cp[bb].note=2;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"---------%s向缓冲区2申请资源---------\n\n"</span>,cp[bb].name); </span><br><span class="line">&#125;</span><br><span class="line">cp[bb].dd=pc; </span><br><span class="line">disp();</span><br><span class="line">Sleep(5000);</span><br><span class="line">system(<span class="string">"cls"</span>);</span><br><span class="line"><span class="built_in">break</span>;</span><br><span class="line">            <span class="keyword">case</span> 1: </span><br><span class="line">            cp[bb].state=<span class="string">'R'</span>;</span><br><span class="line">put();</span><br><span class="line">cp[bb].dd=pc;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"****************Geek面包店****************\n\n"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"--------------现在时间为%d:%d-------------\n\n"</span>,tim,min);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"-------------面包店进行生产工作-----------\n\n"</span>);</span><br><span class="line">        <span class="keyword">if</span>(cp[bb].note=1)</span><br><span class="line">        &#123;</span><br><span class="line">        empty1=v(empty1);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"----------%s释放缓冲区1资源---------\n\n"</span>,cp[bb].name);</span><br><span class="line">&#125; </span><br><span class="line">                </span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">empty2=v(empty2);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"----------%s释放缓冲区2资源---------\n\n"</span>,cp[bb].name);</span><br><span class="line">&#125; </span><br><span class="line">disp();</span><br><span class="line">Sleep(5000);</span><br><span class="line">system(<span class="string">"cls"</span>);</span><br><span class="line"><span class="built_in">break</span>;</span><br><span class="line"><span class="keyword">case</span> 2:</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"--------------对%s重新赋值------------\n\n"</span>,cp[bb].name);</span><br><span class="line">gotol();</span><br><span class="line">cp[bb].state=<span class="string">'W'</span>;</span><br><span class="line">cp[bb].dd=pc;</span><br><span class="line">disp();</span><br><span class="line">Sleep(5000);</span><br><span class="line">system(<span class="string">"cls"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(tag[bb]==0&amp;&amp;bb&gt;=3)/*执行消费者进程且该进程处于就绪状态*/</span><br><span class="line">        &#123;</span><br><span class="line">        <span class="keyword">if</span>(pc!=1)</span><br><span class="line">        &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"****************Geek面包店****************\n\n"</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"--------------现在时间为%d:%d-------------\n\n"</span>,tim,min);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"------------面包店进行销售工作------------\n\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line">            cp[bb].state=<span class="string">'W'</span>;</span><br><span class="line">            j=sa[bb][i];</span><br><span class="line">            pc=i+1;</span><br><span class="line">            switch(j)</span><br><span class="line">            &#123;</span><br><span class="line">            <span class="keyword">case</span> 0: </span><br><span class="line">int huan1;</span><br><span class="line">                huan1=rand()%2;</span><br><span class="line">                <span class="keyword">if</span>(huan1==0)</span><br><span class="line">                &#123;</span><br><span class="line">                empty1=p(empty1);</span><br><span class="line">                cp[bb].note=1;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"---------%s向缓冲区1申请资源---------\n\n"</span>,cp[bb].name); </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                empty2=p(empty2);</span><br><span class="line">                cp[bb].note=2;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"---------%s向缓冲区2申请资源---------\n\n"</span>,cp[bb].name); </span><br><span class="line">&#125;</span><br><span class="line">cp[bb].dd=pc;</span><br><span class="line">disp();</span><br><span class="line">Sleep(5000);</span><br><span class="line">system(<span class="string">"cls"</span>);</span><br><span class="line"><span class="built_in">break</span>;/*申请资源，若没有申请到则跳转*/</span><br><span class="line">            <span class="keyword">case</span> 1: </span><br><span class="line">            cp[bb].state=<span class="string">'R'</span>;</span><br><span class="line">get();</span><br><span class="line">cp[bb].dd=pc;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"****************李冰面包店****************\n\n"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"--------------现在时间为%d:%d-------------\n\n"</span>,tim,min);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"------------面包店进行销售工作------------\n\n"</span>); </span><br><span class="line">        <span class="keyword">if</span>(cp[bb].note=1)</span><br><span class="line">        &#123;</span><br><span class="line">        full1=v(full1);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"----------%s释放缓冲区1资源----------\n\n"</span>,cp[bb].name);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">full2=v(full2);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"----------%s释放缓冲区2资源----------\n\n"</span>,cp[bb].name);</span><br><span class="line">&#125;</span><br><span class="line">                </span><br><span class="line">disp();</span><br><span class="line">Sleep(5000);</span><br><span class="line">system(<span class="string">"cls"</span>);</span><br><span class="line"><span class="built_in">break</span>;</span><br><span class="line"><span class="keyword">case</span> 2:</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"--------------对%s重新赋值-----------\n\n"</span>,cp[bb].name);</span><br><span class="line">gotol();</span><br><span class="line">cp[bb].state=<span class="string">'W'</span>;</span><br><span class="line">cp[bb].dd=pc;</span><br><span class="line">disp();</span><br><span class="line">Sleep(5000);</span><br><span class="line">system(<span class="string">"cls"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        count1=0;</span><br><span class="line">count2=0; </span><br><span class="line">        <span class="keyword">for</span>(xx=0;xx&lt;3;xx++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(tag[xx]==0)</span><br><span class="line">&#123;</span><br><span class="line">count1++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(xx=3;xx&lt;5;xx++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(tag[xx]==0)</span><br><span class="line">&#123;</span><br><span class="line">count2++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">srand(seed);</span><br><span class="line">init();</span><br><span class="line">bornpa();</span><br><span class="line">bornsa();</span><br><span class="line">diaodu();</span><br><span class="line"><span class="built_in">return</span> 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;题目：模拟三个生产者，两个消费者，共享两个缓冲区的情形。&lt;br&gt;代码如下：&lt;/p&gt;
    
    </summary>
    
    
      <category term="计算机" scheme="https://github.com/GeekIce/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
      <category term="操作系统" scheme="https://github.com/GeekIce/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>操作系统实验——银行家算法</title>
    <link href="https://github.com/GeekIce/2019/08/02/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%AE%9E%E9%AA%8C%E2%80%94%E2%80%94%E9%93%B6%E8%A1%8C%E5%AE%B6%E7%AE%97%E6%B3%95/"/>
    <id>https://github.com/GeekIce/2019/08/02/操作系统实验——银行家算法/</id>
    <published>2019-08-02T02:09:05.000Z</published>
    <updated>2019-08-30T06:10:13.586Z</updated>
    
    <content type="html"><![CDATA[<p>###银行家算法<br>（1）判断请求向量是否小于进程需要的资源，若小于，转向第二步；若大于，则提示它所需要的资源数已超过它所宣布的最大值。<br>（2）判断请求向量是否小于系统可利用资源向量，若小于，转向第三步；否则，该进程需等待。<br>（3）系统试探把资源分配给进程，并修改进程需要的资源，可利用资源和进程分配资源的数值</p><pre><code>Available[j]:= Available[j]-Request i[j]；Allocation[i,j]:= Allocation[i,j]+Request i[j]；Need[i,j]:= Need[i,j]-Request i[j]；</code></pre><p>(4) 系统执行安全性算法，检查此次资源分配后系统是否处于安全状态。若安全，才正式将资源分配给进程；否则，恢复进程原来的资源分配状态，让进程Pi等待。</p><p>###代码如下：</p><a id="more"></a><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#include"stdio.h"</span></span><br><span class="line"><span class="comment">#include"time.h"</span></span><br><span class="line"><span class="comment">#include"windows.h"</span></span><br><span class="line"><span class="comment">#define TRUE 1</span></span><br><span class="line"><span class="comment">#define FALSE 0</span></span><br><span class="line"><span class="comment">#define M 5</span></span><br><span class="line"><span class="comment">#define N 3</span></span><br><span class="line">int available[N]=&#123;3,3,2&#125;;</span><br><span class="line">int max[M][N]=&#123;&#123;7,5,3&#125;,&#123;3,2,2&#125;,&#123;9,0,2&#125;,&#123;2,2,2&#125;,&#123;4,3,3&#125;&#125;;</span><br><span class="line">int allocation[M][N]=&#123;&#123;0,1,0&#125;,&#123;2,0,0&#125;,&#123;3,0,2&#125;,&#123;2,1,1&#125;,&#123;0,0,2&#125;&#125;;</span><br><span class="line">int need[M][N],p[M];</span><br><span class="line">int Total_resources[N];//系统中各类资源的总数 </span><br><span class="line">int finish[M],work[N];</span><br><span class="line">int seed(time(NULL));</span><br><span class="line">void init()//初始化need[i][j] </span><br><span class="line">&#123;</span><br><span class="line">    int i,j;</span><br><span class="line"> <span class="keyword">for</span>(i=0;i&lt;M;i++)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">for</span>(j=0;j&lt;N;j++)</span><br><span class="line">&#123;</span><br><span class="line">   need[i][j]=max[i][j]-allocation[i][j];//进程需要的资源是进程需要的最大资源数-进程已分配的资源</span><br><span class="line">   &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">void output()//输出函数</span><br><span class="line">&#123;</span><br><span class="line">int i,j;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\tmax\t allocation\tneed\tavailable"</span>);</span><br><span class="line"> <span class="keyword">for</span>(i=0;i&lt;M;i++)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"\nP[%d]: "</span>,i);</span><br><span class="line">  <span class="keyword">for</span>(j=0;j&lt;N;j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">" %d "</span>,max[i][j]);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">"  "</span>);</span><br><span class="line">   <span class="keyword">for</span>(j=0;j&lt;N;j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">" %d "</span>,allocation[i][j]);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">"    "</span>);</span><br><span class="line">   <span class="keyword">for</span>(j=0;j&lt;N;j++)</span><br><span class="line">&#123;</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">" %d "</span>,need[i][j]);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">"\t"</span>);</span><br><span class="line">   <span class="keyword">if</span>(i==0)</span><br><span class="line">   &#123;</span><br><span class="line">   <span class="keyword">for</span>(j=0;j&lt;N;j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">" %d "</span>,available[j]);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"\n各种资源的数量分别为："</span>);</span><br><span class="line">  <span class="keyword">for</span>(i=0;i&lt;N;i++)</span><br><span class="line">&#123;</span><br><span class="line">    Total_resources[i]=0;//记录各种资源的数量</span><br><span class="line">  <span class="keyword">for</span>(int j=0;j&lt;M;j++)</span><br><span class="line">&#123;</span><br><span class="line">   Total_resources[i]+=allocation[j][i];</span><br><span class="line">   &#125;</span><br><span class="line">   Total_resources[i]+=available[i];</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">" %d "</span>,Total_resources[i]);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">void output_safe(int i)</span><br><span class="line">&#123;</span><br><span class="line">int j;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\nP[%d]: "</span>,i);</span><br><span class="line"><span class="keyword">for</span>(j=0;j&lt;N;j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">" %d "</span>,work[j]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"  "</span>);</span><br><span class="line"><span class="keyword">for</span>(j=0;j&lt;N;j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">" %d "</span>,need[i][j]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"  "</span>);</span><br><span class="line"><span class="keyword">for</span>(j=0;j&lt;N;j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">" %d "</span>,allocation[i][j]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\t  "</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,finish[i]);</span><br><span class="line">&#125;</span><br><span class="line">int compare(int need[],int work[])//需求向量与工作向量的比较</span><br><span class="line">&#123;</span><br><span class="line"> int j;</span><br><span class="line"> <span class="keyword">for</span>(j=0;j&lt;N;j++)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span>(need[j]&gt;work[j])</span><br><span class="line">&#123;</span><br><span class="line">   <span class="built_in">return</span> FALSE;</span><br><span class="line">   &#125;</span><br><span class="line">  &#125;</span><br><span class="line"> <span class="built_in">return</span> TRUE;</span><br><span class="line">&#125;</span><br><span class="line">int isSecurity(int available[],int need[][N],int allocation[][N])//安全性算法 </span><br><span class="line">&#123;</span><br><span class="line"> int i,j,k=0,flag;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\twork\t    need    available\tfinish\n"</span>);</span><br><span class="line"> <span class="keyword">for</span>(i=0;i&lt;M;i++)</span><br><span class="line">&#123;</span><br><span class="line">  finish[i]=FALSE;</span><br><span class="line">  &#125;</span><br><span class="line"> <span class="keyword">for</span>(j=0;j&lt;N;j++)</span><br><span class="line">&#123;</span><br><span class="line">  work[j]=available[j];//初始化work向量</span><br><span class="line">  &#125;</span><br><span class="line"> <span class="keyword">while</span>(TRUE)</span><br><span class="line">&#123;</span><br><span class="line">  flag=FALSE;</span><br><span class="line">  <span class="keyword">for</span>(i=0;i&lt;M;i++)</span><br><span class="line">&#123;</span><br><span class="line">   <span class="keyword">if</span>(finish[i]==FALSE&amp;&amp;compare(need[i],work)==TRUE)//寻找满足条件的进程</span><br><span class="line">&#123;</span><br><span class="line">    finish[i]=TRUE;</span><br><span class="line">    p[k++]=i;</span><br><span class="line">output_safe(i);</span><br><span class="line">Sleep(2000);</span><br><span class="line"><span class="keyword">for</span>(j=0;j&lt;N;j++)</span><br><span class="line">&#123;</span><br><span class="line">     work[j]+=allocation[i][j];</span><br><span class="line">     &#125;</span><br><span class="line">    flag=TRUE;</span><br><span class="line">    <span class="built_in">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(finish[i]==TRUE&amp;&amp;compare(need[i],work)==TRUE)//不满足输出原因</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n进程%d已运行\n"</span>,i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(finish[i]==FALSE&amp;&amp;compare(need[i],work)==FALSE) //不满足输出原因</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n系统中的资源数目为："</span>);</span><br><span class="line"><span class="keyword">for</span>(j=0;j&lt;N;j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d "</span>,work[j]);</span><br><span class="line">&#125; </span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"小于进程%d需要的资源"</span>,i);</span><br><span class="line"><span class="keyword">for</span>(j=0;j&lt;N;j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d "</span>,need[i][j]);</span><br><span class="line">&#125; </span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line">   &#125;</span><br><span class="line">  <span class="keyword">if</span>(flag==FALSE)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span>(i=0;i&lt;M;i++)</span><br><span class="line">&#123;</span><br><span class="line">     <span class="keyword">if</span>(finish[i]==FALSE) </span><br><span class="line"> <span class="built_in">return</span> FALSE;</span><br><span class="line">     &#125;</span><br><span class="line">    <span class="built_in">return</span> TRUE;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">void operate()</span><br><span class="line">&#123;</span><br><span class="line"> int i,j,flag,f1,request[M][N];</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">"\n****************************************************************\n"</span>);</span><br><span class="line"> <span class="keyword">while</span>(TRUE)</span><br><span class="line">&#123;</span><br><span class="line">  f1=FALSE;</span><br><span class="line">  i=rand()%6;//随机产生进程</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n随机产生发送请求的进程为：%d\n"</span>,i);</span><br><span class="line">  <span class="keyword">if</span>(i&gt;=M)</span><br><span class="line">&#123;</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">"这个进程不存在!\n"</span>);</span><br><span class="line">   Sleep(10000);</span><br><span class="line">    system(<span class="string">"cls"</span>);</span><br><span class="line">    output();</span><br><span class="line">   <span class="built_in">continue</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span>(i&lt;0) </span><br><span class="line">  <span class="built_in">break</span>;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"输入请求向量：\n"</span>);</span><br><span class="line">  <span class="keyword">for</span>(j=0;j&lt;N;j++)</span><br><span class="line">&#123;</span><br><span class="line">   scanf(<span class="string">"%d"</span>,&amp;request[i][j]);</span><br><span class="line">   &#125;</span><br><span class="line">  <span class="keyword">for</span>(j=0;j&lt;N;j++)</span><br><span class="line">&#123;</span><br><span class="line">   <span class="keyword">if</span>(request[i][j]&gt;need[i][j])//比较进程请求与进程需求</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"请求超过需求，造成资源浪费!\n"</span>);</span><br><span class="line">    Sleep(10000);</span><br><span class="line">    system(<span class="string">"cls"</span>);</span><br><span class="line">    output();</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">"\n**************************************************************\n"</span>);</span><br><span class="line">    f1=TRUE;</span><br><span class="line">    <span class="built_in">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">   &#125;</span><br><span class="line">  <span class="keyword">for</span>(j=0;j&lt;N&amp;&amp;f1==FALSE;j++)</span><br><span class="line">&#123;</span><br><span class="line">   <span class="keyword">if</span>(request[i][j]&gt;available[j]) //比较进程请求与系统可用资源</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"这个请求超过可用资源!\n"</span>);</span><br><span class="line">    Sleep(10000);</span><br><span class="line">    system(<span class="string">"cls"</span>);</span><br><span class="line">    output();</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">"\n**************************************************************\n"</span>);</span><br><span class="line">    f1=TRUE;</span><br><span class="line">    <span class="built_in">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">   &#125;</span><br><span class="line">  <span class="keyword">if</span>(f1==TRUE) </span><br><span class="line">  <span class="built_in">continue</span>;</span><br><span class="line">  <span class="keyword">for</span>(j=0;j&lt;N;j++)//系统试探把资源分配给进程，并修改进程需要的资源，可利用资源和进程分配资源的数值</span><br><span class="line">&#123;</span><br><span class="line">   available[j]-=request[i][j];</span><br><span class="line">   allocation[i][j]+=request[i][j];</span><br><span class="line">   need[i][j]-=request[i][j];</span><br><span class="line">   &#125;</span><br><span class="line">   Sleep(10000);</span><br><span class="line">system(<span class="string">"cls"</span>);</span><br><span class="line">output();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n**************************************************************\n"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"该请求满足条件，可执行!\n"</span>);</span><br><span class="line">  flag=isSecurity(available,need,allocation);</span><br><span class="line">  <span class="keyword">if</span>(flag==TRUE)//请求是安全的，输出安全序列</span><br><span class="line">&#123;</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">"\n这个请求是安全的!\n"</span>);</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">"安全序列为:\n"</span>);</span><br><span class="line">   <span class="keyword">for</span>(i=0;i&lt;M;i++)</span><br><span class="line">&#123;</span><br><span class="line">    i==4 ? <span class="built_in">printf</span>(<span class="string">"P[%d]"</span>,i) : <span class="built_in">printf</span>(<span class="string">"P[%d]--&gt;"</span>,p[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    Sleep(10000);</span><br><span class="line">    system(<span class="string">"cls"</span>);</span><br><span class="line">   output();</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">"\n**************************************************************\n"</span>);</span><br><span class="line">   &#125;</span><br><span class="line">  <span class="keyword">else</span>//请求不安全，恢复进程原来的数据</span><br><span class="line">&#123;</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">"这个请求是不安全的!进程的各个资源情况不变\n"</span>);</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">"这个请求需要等待!\n"</span>);</span><br><span class="line">   Sleep(10000);</span><br><span class="line">    system(<span class="string">"cls"</span>);</span><br><span class="line">  <span class="keyword">for</span>(j=0;j&lt;N;j++)</span><br><span class="line">&#123;</span><br><span class="line">    available[j]+=request[i][j];</span><br><span class="line">    allocation[i][j]-=request[i][j];</span><br><span class="line">    need[i][j]+=request[i][j];</span><br><span class="line">    &#125;</span><br><span class="line">   output();</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">"\n*************************************************************\n"</span>);</span><br><span class="line">   &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">srand(seed);</span><br><span class="line">init();</span><br><span class="line">output();</span><br><span class="line"> operate();</span><br><span class="line"><span class="built_in">return</span> 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;###银行家算法&lt;br&gt;（1）判断请求向量是否小于进程需要的资源，若小于，转向第二步；若大于，则提示它所需要的资源数已超过它所宣布的最大值。&lt;br&gt;（2）判断请求向量是否小于系统可利用资源向量，若小于，转向第三步；否则，该进程需等待。&lt;br&gt;（3）系统试探把资源分配给进程，并修改进程需要的资源，可利用资源和进程分配资源的数值&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Available[j]:= Available[j]-Request i[j]；

Allocation[i,j]:= Allocation[i,j]+Request i[j]；

Need[i,j]:= Need[i,j]-Request i[j]；&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;(4) 系统执行安全性算法，检查此次资源分配后系统是否处于安全状态。若安全，才正式将资源分配给进程；否则，恢复进程原来的资源分配状态，让进程Pi等待。&lt;/p&gt;
&lt;p&gt;###代码如下：&lt;/p&gt;
    
    </summary>
    
    
      <category term="计算机" scheme="https://github.com/GeekIce/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
      <category term="操作系统" scheme="https://github.com/GeekIce/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>TCP三次握手和四次挥手</title>
    <link href="https://github.com/GeekIce/2019/07/30/TCP%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B%E5%92%8C%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B/"/>
    <id>https://github.com/GeekIce/2019/07/30/TCP三次握手和四次挥手/</id>
    <published>2019-07-30T01:53:48.000Z</published>
    <updated>2019-08-30T06:52:56.009Z</updated>
    
    <content type="html"><![CDATA[<h3 id="TCP三次握手"><a href="#TCP三次握手" class="headerlink" title="TCP三次握手"></a>TCP三次握手</h3><p>1.Client将标志位SYN置为1，随机产生一个值seq=J，并将该数据包发送给Server，Client进入SYN_SENT状态，等待Server确认。<br>2.Server收到数据包后由标志位SYN=1知道Client请求建立连接，Server将标志位SYN和ACK都置为1，ack=J+1，随机产生一个值seq=K，<br>    并将该数据包发送给Client以确认连接请求，Server进入SYN_RCVD状态。<br>3.Client收到确认后，检查ack是否为J+1，ACK是否为1，如果正确则将标志位ACK置为1，ack=K+1，并将该数据包发送给Server，Server检<br>    查ack是否为K+1，ACK是否为1，如果正确则连接建立成功，Client和Server进入ESTABLISHED状态，完成三次握手，随后Client与Server之<br>    间可以开始传输数据了。</p><a id="more"></a><h3 id="TCP四次挥手"><a href="#TCP四次挥手" class="headerlink" title="TCP四次挥手"></a>TCP四次挥手</h3><p>由于TCP连接时全双工的，因此，每个方向都必须要单独进行关闭，这一原则是当一方完成数据发送任务后，发送一个FIN来终止这一方向的连接，<br>收到一个FIN只是意味着这一方向上没有数据流动了，即不会再收到数据了，但是在这个TCP连接上仍然能够发送数据，直到这一方向也发送了FIN。<br>首先进行关闭的一方将执行主动关闭，而另一方则执行被动关闭。</p><p>1.数据传输结束后，客户端的应用进程发出连接释放报文段，并停止发送数据，客户端进入FIN_WAIT_1状态，此时客户端依然可以接收服务器发送来<br>   的数据。<br>2.服务器接收到FIN后，发送一个ACK给客户端，确认序号为收到的序号+1，服务器进入CLOSE_WAIT状态。客户端收到后进入FIN_WAIT_2状态。<br>3.当服务器没有数据要发送时，服务器发送一个FIN报文，此时服务器进入LAST_ACK状态，等待客户端的确认<br>4.客户端收到服务器的FIN报文后，给服务器发送一个ACK报文，确认序列号为收到的序号+1。此时客户端进入TIME_WAIT状态，等待2MSL（MSL：<br>报文段最大生存时间），然后关闭连接。</p><h3 id="TCP三次握手的原因"><a href="#TCP三次握手的原因" class="headerlink" title="TCP三次握手的原因"></a>TCP三次握手的原因</h3><p>TCP是全双工通信，两次握手只能确定单向数据链路是可以通信的，并不能保证反向的通信正常。三次握手可以防止已经失效的连接请求报文突然又传<br>输到服务器端导致的服务器资源浪费。例如，客户端先发送了一个SYN，但是由于网络阻塞，该SYN数据包在某个节点长期滞留。然后客户端又重传<br>SYN数据包并正确建立TCP连接，然后传输完数据后关闭该连接。该连接释放后失效的SYN数据包才到达服务器端。在二次握手的前提下，服务器端会<br>认为这是客户端发起的又一次请求，然后发送SYN ，并且在服务器端创建socket套接字，一直等待客户端发送数据。但是由于客户端并没有发起新的请<br>求，所以会丢弃服务端的SYN 。此时服务器会一直等待客户端发送数据从而造成资源浪费。</p><h3 id="TCP四次挥手的原因"><a href="#TCP四次挥手的原因" class="headerlink" title="TCP四次挥手的原因"></a>TCP四次挥手的原因</h3><p>由于连接的关闭控制权在应用层，所以被动关闭的一方在接收到FIN包时，TCP协议栈会直接发送一个ACK确认包，优先关闭一端的通信。然后通知应用<br>层，由应用层决定什么时候发送FIN包。应用层可以使用系统调用函数read==0来判断对端是否关闭连接。 </p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;TCP三次握手&quot;&gt;&lt;a href=&quot;#TCP三次握手&quot; class=&quot;headerlink&quot; title=&quot;TCP三次握手&quot;&gt;&lt;/a&gt;TCP三次握手&lt;/h3&gt;&lt;p&gt;1.Client将标志位SYN置为1，随机产生一个值seq=J，并将该数据包发送给Server，Client进入SYN_SENT状态，等待Server确认。&lt;br&gt;2.Server收到数据包后由标志位SYN=1知道Client请求建立连接，Server将标志位SYN和ACK都置为1，ack=J+1，随机产生一个值seq=K，&lt;br&gt;    并将该数据包发送给Client以确认连接请求，Server进入SYN_RCVD状态。&lt;br&gt;3.Client收到确认后，检查ack是否为J+1，ACK是否为1，如果正确则将标志位ACK置为1，ack=K+1，并将该数据包发送给Server，Server检&lt;br&gt;    查ack是否为K+1，ACK是否为1，如果正确则连接建立成功，Client和Server进入ESTABLISHED状态，完成三次握手，随后Client与Server之&lt;br&gt;    间可以开始传输数据了。&lt;/p&gt;
    
    </summary>
    
    
      <category term="计算机" scheme="https://github.com/GeekIce/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
      <category term="计算机网络" scheme="https://github.com/GeekIce/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>操作系统实验——随机事件模拟</title>
    <link href="https://github.com/GeekIce/2019/07/28/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%AE%9E%E9%AA%8C%E2%80%94%E2%80%94%E9%9A%8F%E6%9C%BA%E4%BA%8B%E4%BB%B6%E6%A8%A1%E6%8B%9F/"/>
    <id>https://github.com/GeekIce/2019/07/28/操作系统实验——随机事件模拟/</id>
    <published>2019-07-28T04:15:41.000Z</published>
    <updated>2019-08-30T07:07:23.915Z</updated>
    
    <content type="html"><![CDATA[<p>###题目描述：<br>       模拟银行的业务处理过程，银行有三个窗口，每天8点开门，12点关门，银行业务主要包括两种：存钱和取钱，每件业务的处理时间为3-5分钟。<br>解题思路：<br>       本程序关键函数为函数rom()。程序开始利用函数rand()随机产生当前时间，然后判断时间是否在8：00–<br>12：00之间，若不在，则程序结束；若在，则进入函数rom(),首先将三个窗口分别编号1，2，3，并且将是<br>三个窗口办理业务的人数均初始化为0。然后进入while循环，首先判断时间是否满足条件，若不满足，则退<br>出程序；若满足，利用函数rand()随机产生每分钟进来的人数，比较三个窗口的人数，将新来办理业务的人<br>分别安排到三个窗口办理业务人数最少的一个窗口，给每个窗口未办理业务或正在办理业务的人的编号，并<br>将当前每个窗口的人数加一，用sum1统计银行从营业到关门这一时间段内来银行办理业务总人数，然后显<br>示三个窗口的业务办理情况及每个窗口的排队情况。每次循环分钟加一，直到时间到12点程序结束。</p><p>###代码如下：</p><a id="more"></a><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#include"stdio.h"</span></span><br><span class="line"><span class="comment">#include"stdlib.h"</span></span><br><span class="line"><span class="comment">#include"time.h"</span></span><br><span class="line"><span class="comment">#include"windows.h"</span></span><br><span class="line">void rom();</span><br><span class="line">int tim,i,j,min,sum=0;//sum代表当前银行需要办理业务的总人数</span><br><span class="line">int h1time=0,aa,h2time=0,ab,h3time=0,ac;</span><br><span class="line">int tag1=0,tag2=0,tag3=0;</span><br><span class="line">int cpeople,count=0;//cpeople为每分钟银行进来的人数</span><br><span class="line">int x1[200],x2[200],x3[200];//三个数组存放每个窗口未办理业务或正在办理业务的人的编号</span><br><span class="line">int p=0,q=0,s=0;</span><br><span class="line">int a[3];</span><br><span class="line">int sum1=0;//代表银行从营业到关门这一时间段内来银行办理业务的总人数</span><br><span class="line">int ax=0,ay=0,az=0;</span><br><span class="line">struct W//id存放窗口编号，num存放当前每个窗口的人数</span><br><span class="line">&#123;</span><br><span class="line">int id;</span><br><span class="line">int num;</span><br><span class="line">&#125;W;</span><br><span class="line">struct W w[3];</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">int seed=time(NULL);</span><br><span class="line">srand(seed);</span><br><span class="line">tim=rand()%24;</span><br><span class="line">//tim=11;</span><br><span class="line">min=rand()%60;</span><br><span class="line">//min=54;</span><br><span class="line"><span class="keyword">if</span>(tim&lt;8||tim&gt;=12)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"-------------------------------银行随机时间模拟---------------------------\n"</span>); </span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"**************************************************************************\n"</span>);</span><br><span class="line">    <span class="keyword">if</span>(min&lt;10)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"-----------------------------现在时间为%d：0%d-----------------------------\n"</span>,tim,min);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">"-----------------------------现在时间为%d：%d-----------------------------\n"</span>,tim,min);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"-------------------------------银行已关门！-------------------------------\n"</span>);</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">rom();</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">return</span> 0;</span><br><span class="line">&#125; </span><br><span class="line">void rom()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(i=0;i&lt;3;i++)</span><br><span class="line">&#123;</span><br><span class="line">w[i].id=i+1;</span><br><span class="line">w[i].num=0;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(tim&lt;12)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"-------------------------------银行随机时间模拟---------------------------\n"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"**************************************************************************\n"</span>);</span><br><span class="line"><span class="keyword">if</span>(min&lt;60&amp;&amp;tim&lt;12)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span>(min&lt;10)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"-                          现在时间为%d：0%d                         -\n"</span>,tim,min);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"-                          现在时间为%d：%d                          -\n"</span>,tim,min);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"-                            银行正在营业中！                        -\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"-                       营业时间为8：00--12：00                      -\n"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"-                       距离关门还有：%d小时%d分                      -\n"</span>,12-tim-1,60-min);</span><br><span class="line"><span class="keyword">if</span>(min==60)</span><br><span class="line">&#123;</span><br><span class="line">tim++;</span><br><span class="line"><span class="keyword">if</span>(tim==12)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"-                          现在时间为12：00                          -\n"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"-                          银行已停止营业                            -\n"</span>);</span><br><span class="line"><span class="built_in">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">min=0;</span><br><span class="line">&#125;</span><br><span class="line">cpeople=rand()%5;//随机产生每分钟进来的人数</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"本分钟银行来了%d个人\n"</span>,cpeople);</span><br><span class="line">        <span class="keyword">for</span>(i=sum1;i&lt;sum1+cpeople;i++)//为每一时刻进来的人安排窗口办理业务</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(w[0].num&lt;=w[1].num&amp;&amp;w[0].num&lt;=w[2].num)</span><br><span class="line">&#123;</span><br><span class="line">x1[w[0].num]=1+i;</span><br><span class="line">w[0].num++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(w[1].num&lt;w[0].num&amp;&amp;w[1].num&lt;=w[2].num)</span><br><span class="line">&#123;</span><br><span class="line">x2[w[1].num]=1+i;</span><br><span class="line">w[1].num++;</span><br><span class="line">&#125;  </span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">x3[w[2].num]=1+i;</span><br><span class="line">w[2].num++;</span><br><span class="line">&#125;    </span><br><span class="line">&#125;</span><br><span class="line">sum1=sum1+cpeople;//统计银行从营业到关门这一时间段内来银行办理业务总人数</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"-----------1窗口---------   ---------2窗口---------   ---------3窗口-----------\n"</span>);</span><br><span class="line"><span class="keyword">if</span>(w[0].num==0)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"           空闲           "</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(h1time!=0)</span><br><span class="line">&#123;</span><br><span class="line">h1time--;</span><br><span class="line"><span class="keyword">if</span>(h1time==0)//办理业务的时间为0，则将窗口队列前移</span><br><span class="line">&#123; </span><br><span class="line">                    <span class="keyword">for</span>(j=0;j&lt;w[0].num-1;j++)</span><br><span class="line">&#123;</span><br><span class="line">x1[j]=x1[j+1];</span><br><span class="line">&#125;</span><br><span class="line">                    w[0].num--;</span><br><span class="line"> sum--;</span><br><span class="line">&#125;</span><br><span class="line">                  //如果不判断办理业务的时间是否为0，则一个窗口可能有俩个输出结果，一个是上一个人结束（剩余时间为0）的情况，另一个是紧接着刚刚开始办理业务的人的情况</span><br><span class="line"><span class="keyword">if</span>(aa==0&amp;&amp;h1time!=0)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"  取款   "</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(h1time!=0)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"  存款   "</span>);</span><br><span class="line"><span class="keyword">if</span>(h1time!=0)</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"   剩余时间%d分钟  "</span>,h1time);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(h1time==0)</span><br><span class="line">&#123;</span><br><span class="line">h1time=rand()%3+3;//产生办理业务时间（3-5分钟）</span><br><span class="line">           aa=rand()%2;//随机产生办理的业务</span><br><span class="line">    <span class="keyword">if</span>(aa==0)</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"  取款   "</span>);</span><br><span class="line">    <span class="keyword">if</span>(aa==1)</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"  存款   "</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"   剩余时间%d分钟  "</span>,h1time);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(w[1].num==0)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"           空闲           "</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(h2time!=0)</span><br><span class="line">&#123;</span><br><span class="line">h2time--;</span><br><span class="line"><span class="keyword">if</span>(h2time==0) //办理业务的时间为0，则将窗口队列前移</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(j=0;j&lt;w[1].num-1;j++)</span><br><span class="line">&#123;</span><br><span class="line">x2[j]=x2[j+1];</span><br><span class="line">&#125;</span><br><span class="line">w[1].num--;</span><br><span class="line">sum--;</span><br><span class="line">&#125;</span><br><span class="line">                  //如果不判断办理业务的时间是否为0，则一个窗口可能有俩个输出结果，一个是上一个人结束（剩余时间为0）的情况，另一个是紧接着刚刚开始办理业务的人的情况</span><br><span class="line"><span class="keyword">if</span>(ab==0&amp;&amp;h2time!=0)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"  取款   "</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(h2time!=0)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"  存款   "</span>);</span><br><span class="line"><span class="keyword">if</span>(h2time!=0)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"   剩余时间%d分钟  "</span>,h2time);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(h2time==0)</span><br><span class="line">&#123;</span><br><span class="line">h2time=rand()%3+3; //产生办理业务时间（3-5分钟）</span><br><span class="line">       ab=rand()%2; //随机产生办理的业务</span><br><span class="line"><span class="keyword">if</span>(ab==0)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"  取款   "</span>);</span><br><span class="line"><span class="keyword">if</span>(ab==1)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"  存款   "</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"   剩余时间%d分钟  "</span>,h2time);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(w[2].num==0)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"           空闲           \n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(h3time!=0)</span><br><span class="line">&#123;</span><br><span class="line">h3time--;</span><br><span class="line"><span class="keyword">if</span>(h3time==0) //办理业务的时间为0，则将窗口队列前移</span><br><span class="line">&#123; </span><br><span class="line"><span class="keyword">for</span>(j=0;j&lt;w[2].num-1;j++)</span><br><span class="line">&#123;</span><br><span class="line">x3[j]=x3[j+1];</span><br><span class="line">&#125;</span><br><span class="line">                     w[2].num--;</span><br><span class="line"> sum--;</span><br><span class="line">&#125;</span><br><span class="line">                  //如果不判断办理业务的时间是否为0，则一个窗口可能有俩个输出结果，一个是上一个人结束（剩余时间为0）的情况，另一个是紧接着刚刚开始办理业务的人的情况</span><br><span class="line"><span class="keyword">if</span>(ac==0&amp;&amp;h3time!=0)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"  取款   "</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(h3time!=0)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"  存款   "</span>);</span><br><span class="line"><span class="keyword">if</span>(h3time!=0)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"   剩余时间%d分钟  \n"</span>,h3time);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(h3time==0)</span><br><span class="line">&#123;</span><br><span class="line">h3time=rand()%3+3; //产生办理业务时间（3-5分钟）</span><br><span class="line">       ac=rand()%2; //随机产生办理的业务</span><br><span class="line"><span class="keyword">if</span>(ac==0)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"  取款   "</span>);</span><br><span class="line"><span class="keyword">if</span>(ac==1)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"  存款   "</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"   剩余时间%d分钟  \n"</span>,h3time);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">sum=w[0].num+w[1].num+w[2].num;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"现在人数为：%d\n"</span>,sum);</span><br><span class="line"><span class="keyword">for</span>(i=0;i&lt;3;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d窗口有%d个人\n"</span>,w[i].id,w[i].num);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"--------------------------------每个窗口排队情况：--------------------------------\n"</span>); </span><br><span class="line"><span class="keyword">for</span>(i=0;i&lt;w[0].num;i++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d "</span>,x1[i]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"-------"</span>);</span><br><span class="line"><span class="keyword">for</span>(i=0;i&lt;w[1].num;i++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d "</span>,x2[i]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"-------"</span>);</span><br><span class="line"><span class="keyword">for</span>(i=0;i&lt;w[2].num;i++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d "</span>,x3[i]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"-------"</span>);</span><br><span class="line">Sleep(1000);</span><br><span class="line">system(<span class="string">"cls"</span>);</span><br><span class="line">min=min+1;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;###题目描述：&lt;br&gt;       模拟银行的业务处理过程，银行有三个窗口，每天8点开门，12点关门，银行业务主要包括两种：存钱和取钱，每件业务的处理时间为3-5分钟。&lt;br&gt;解题思路：&lt;br&gt;       本程序关键函数为函数rom()。程序开始利用函数rand()随机产生当前时间，然后判断时间是否在8：00–&lt;br&gt;12：00之间，若不在，则程序结束；若在，则进入函数rom(),首先将三个窗口分别编号1，2，3，并且将是&lt;br&gt;三个窗口办理业务的人数均初始化为0。然后进入while循环，首先判断时间是否满足条件，若不满足，则退&lt;br&gt;出程序；若满足，利用函数rand()随机产生每分钟进来的人数，比较三个窗口的人数，将新来办理业务的人&lt;br&gt;分别安排到三个窗口办理业务人数最少的一个窗口，给每个窗口未办理业务或正在办理业务的人的编号，并&lt;br&gt;将当前每个窗口的人数加一，用sum1统计银行从营业到关门这一时间段内来银行办理业务总人数，然后显&lt;br&gt;示三个窗口的业务办理情况及每个窗口的排队情况。每次循环分钟加一，直到时间到12点程序结束。&lt;/p&gt;
&lt;p&gt;###代码如下：&lt;/p&gt;
    
    </summary>
    
    
      <category term="计算机" scheme="https://github.com/GeekIce/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
      <category term="操作系统" scheme="https://github.com/GeekIce/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>TCP和UDP</title>
    <link href="https://github.com/GeekIce/2019/07/27/TCP%E5%92%8CUDP/"/>
    <id>https://github.com/GeekIce/2019/07/27/TCP和UDP/</id>
    <published>2019-07-27T02:00:53.000Z</published>
    <updated>2019-08-30T07:00:24.202Z</updated>
    
    <content type="html"><![CDATA[<h3 id="TCP"><a href="#TCP" class="headerlink" title="TCP"></a>TCP</h3><p>TCP的主要特点：<br>1.TCP是面向连接的，发送数据之前需要建立连接。<br>2.TCP保证可靠交付，同时也使用拥塞控制。<br>3.TCP是面向字节流的。<br>4.每一条TCP连接只能是一对一。<br>5.TCP的通信是全双工的。</p><p>TCP报文段为：TCP首部+TCP数据部分。</p><p>TCP报文段的首部格式：TCP首部长度不变，包括20字节的固定首部和可变长度。在正常情况下，大多数据包就是20个字节首部。</p><a id="more"></a><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">源端口（16位）：数据发送方的端口号。</span><br><span class="line">目的端口（16位）：数据接收方的端口号。</span><br><span class="line">序号（32位）：TCP是面向字节流的，传输的数据按顺序分块在TCP缓冲中存放，TCP要组建数据包一段段向外发送。序号就是指该段的第一个字节是所需传输数据的第几个字节。</span><br><span class="line">确认号（32位）：在两个计算机之间传输文件，数据包或数据段传到接收文件的计算机的缓存，需给发送方一个确认。确认号是指接收方返回一个数据包，上一次传输的数据包的最后一个字节是什么，让发送方继续发送第多少个字节开始的数据包。</span><br><span class="line">数据偏移（4位）：由于TCP报文段首部长度不固定，当计算机收到TCP报文段后，数据偏移用来记录TCP保温算第多少个字节以后是数据部分。该字段的值是TCP首部（包括选项）长度除以4。</span><br><span class="line">保留（6位）</span><br><span class="line">标志位（6位）</span><br><span class="line">      URG：用来告诉计算机数据段中要传输的数据比较紧急，优先传输该数据段，不需排队等待。</span><br><span class="line">      ACK：该位为0，确认号无效；该位为1，确认号有效。</span><br><span class="line">      PSH：该位为1表示这是一个连接请求或连接接收报文</span><br><span class="line">      RST：该位为1，说明tcp会话出现了严重的错误，必须重新释放连接。若想正常通讯，必须重新建立连接。</span><br><span class="line">      SYN：在建立TCP连接的时候使用。</span><br><span class="line">      FIN：数据通讯结束，关闭TCP连接的时候使用。</span><br><span class="line">窗口：接收方通知发送方接收缓存的大小，发送方根据接收缓存设置自己的发送缓存大小。</span><br><span class="line">校验和（16位）：用来检验TCP首部和数据两部分的正确。</span><br><span class="line">紧急指针（16位）：只有URG标志位被设置时该字段才有意义，表示紧急数据相对序列号的偏移。</span><br></pre></td></tr></table></figure><h3 id="UDP"><a href="#UDP" class="headerlink" title="UDP"></a>UDP</h3><p>UDP的主要特点：<br>1.UDP是无连接的，发送数据之前不需要建立连接。<br>2.UDP使用尽最大努力交付，不保证可靠交付，同时也不使用拥塞控制。<br>3.UDP是面向报文的。<br>4.UDP支持一对一，一对多，多对一和多对多的交互通信。<br>5.UDP的首部开销少。</p><p>UDP报文格式</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">源端口（16位）：数据发送方的端口号。</span><br><span class="line">目的端口（16位）：数据接收方的端口号。</span><br><span class="line">UDP长度（16位）：UDP报文的字节长度（包括首部和数据）。</span><br><span class="line">UDP校验和（16位）: 用来检验UDP首部和数据部分的正确。</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;TCP&quot;&gt;&lt;a href=&quot;#TCP&quot; class=&quot;headerlink&quot; title=&quot;TCP&quot;&gt;&lt;/a&gt;TCP&lt;/h3&gt;&lt;p&gt;TCP的主要特点：&lt;br&gt;1.TCP是面向连接的，发送数据之前需要建立连接。&lt;br&gt;2.TCP保证可靠交付，同时也使用拥塞控制。&lt;br&gt;3.TCP是面向字节流的。&lt;br&gt;4.每一条TCP连接只能是一对一。&lt;br&gt;5.TCP的通信是全双工的。&lt;/p&gt;
&lt;p&gt;TCP报文段为：TCP首部+TCP数据部分。&lt;/p&gt;
&lt;p&gt;TCP报文段的首部格式：TCP首部长度不变，包括20字节的固定首部和可变长度。在正常情况下，大多数据包就是20个字节首部。&lt;/p&gt;
    
    </summary>
    
    
      <category term="计算机" scheme="https://github.com/GeekIce/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
      <category term="计算机网络" scheme="https://github.com/GeekIce/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>死锁</title>
    <link href="https://github.com/GeekIce/2019/07/26/%E6%AD%BB%E9%94%81/"/>
    <id>https://github.com/GeekIce/2019/07/26/死锁/</id>
    <published>2019-07-26T02:13:24.000Z</published>
    <updated>2019-08-30T07:06:21.702Z</updated>
    
    <content type="html"><![CDATA[<h3 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h3><p>1.死锁：是指多个进程在运行过程中因争夺资源二造成的一种僵局，当进程处于这种僵持状态时，若无外力作用，他们都将无法在向前推进。<br>2.产生死锁的原因：竞争不可抢占资源<br>                  竞争消耗性资源，如消息<br>                  进程顺序推进不当<br>3.产生死锁的必要条件（必须同时具备下面四个条件，只要其中任意一个不成立，死锁就不会发生）：互斥，请求和保持，不可抢占，循环等待<br>4.处理死锁的方法：预防死锁，避免死锁，检测死锁，解除死锁。</p><a id="more"></a><h3 id="预防死锁"><a href="#预防死锁" class="headerlink" title="预防死锁"></a>预防死锁</h3><p>破坏“请求和保持”<br>破坏“不可抢占”<br>破坏“循环等待”</p><h3 id="避免死锁：银行家算法（重点）"><a href="#避免死锁：银行家算法（重点）" class="headerlink" title="避免死锁：银行家算法（重点）"></a>避免死锁：银行家算法（重点）</h3><p>银行家算法：</p><p>设Request i是进程Pi的请求向量，如果Request i[j]=K，表示进程P i需要K个R j类型的资源。当P i发出资源请求后，系统按下述步骤进行检查：</p><p>(1) 如果Request i[j]&lt;=Need[i,j]，便转向步骤(2)；否则认为出错，因为它所需要的资源数已超过它所宣布的最大值。</p><p>(2) 如果Request i[j]≤Available[j]，便转向步骤(3)；否则，表示尚无足够资源，Pi须等待。</p><p>(3) 系统试探着把资源分配给进程P i，并修改进程需要的资源，可利用资源和进程分配资源的数值：</p><pre><code>Available[j]:= Available[j]-Request i[j]；Allocation[i,j]:= Allocation[i,j]+Request i[j]；Need[i,j]:= Need[i,j]-Request i[j]；</code></pre><p>(4) 系统执行安全性算法，检查此次资源分配后系统是否处于安全状态。若安全，才正式将资源分配给进程Pi，以完成本次分配；否则，恢复原来的资源分配状态，让进程Pi等待。</p><p>安全性算法：</p><p> (1) 设置两个向量：</p><p>　　① 工作向量Work，它表示系统可提供给进程继续运行所需的各类资源数目，它含有m个元素，在执行安全算法开始时，Work:=Available。</p><p>　　② Finish，它表示系统是否有足够的资源分配给进程，使之运行完成。开始时先做Finish[i]:=false；当有足够资源分配给进程时，再令Finish[i]:=true。</p><p>(2) 从进程集合中找到一个能满足下述条件的进程：</p><p>　　① Finish[i]=false；</p><p>　　② Need[i,j]≤Work[j]；若找到，执行步骤(3)，否则，执行步骤(4)。</p><p>(3) 当进程Pi获得资源后，可顺利执行，直至完成，并释放出分配给它的资源，故应执行：</p><pre><code>Work[j]:= Work[j]+Allocation[i,j]；Finish[i]:=true；go to step （2）；</code></pre><p>(4) 如果所有进程的Finish[i]=true都满足，则表示系统处于安全状态；否则，系统处于不安全状态。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;死锁&quot;&gt;&lt;a href=&quot;#死锁&quot; class=&quot;headerlink&quot; title=&quot;死锁&quot;&gt;&lt;/a&gt;死锁&lt;/h3&gt;&lt;p&gt;1.死锁：是指多个进程在运行过程中因争夺资源二造成的一种僵局，当进程处于这种僵持状态时，若无外力作用，他们都将无法在向前推进。&lt;br&gt;2.产生死锁的原因：竞争不可抢占资源&lt;br&gt;                  竞争消耗性资源，如消息&lt;br&gt;                  进程顺序推进不当&lt;br&gt;3.产生死锁的必要条件（必须同时具备下面四个条件，只要其中任意一个不成立，死锁就不会发生）：互斥，请求和保持，不可抢占，循环等待&lt;br&gt;4.处理死锁的方法：预防死锁，避免死锁，检测死锁，解除死锁。&lt;/p&gt;
    
    </summary>
    
    
      <category term="计算机" scheme="https://github.com/GeekIce/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
      <category term="操作系统" scheme="https://github.com/GeekIce/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
</feed>
